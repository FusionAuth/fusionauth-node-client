/*
 * Copyright (c) 2018-2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"

project(group: "io.fusionauth", name: "fusionauth-node-client", version: "1.21.0", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  publications {
    main {
      publication(name: "fusionauth-node-client", type: "tgz", file: "fusionauth-node-client-${project.version}.tgz")
    }
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

target(name: "clean", description: "Cleans build directory") {
  file.prune(dir: "build")
  file.delete {
    fileSet(dir: ".", includePatterns: [~/.+\.tgz/])
  }
}

target(name: "int", description: "Releases a local integration build of the project") {
  def npmInstall = 'npm pack'.execute()
  npmInstall.consumeProcessOutput(System.out, System.err)
  npmInstall.waitFor()
  dependency.integrate()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "test", description: "Runs the tests") {
  def npmInstall = 'npm install'.execute()
  npmInstall.consumeProcessOutput(System.out, System.err)
  npmInstall.waitFor()
  if (new ProcessBuilder('npm', 'test').inheritIO().start().waitFor() != 0) {
    fail("Tests failed")
  }
}

target(name: "publish", description: "Publish in NPM", dependsOn: ["clean", "int"]) {
  def npmPublish = 'npm publish --access=public'.execute()
  npmPublish.consumeProcessOutput(System.out, System.err)
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["int"]) {
  release.release()
}
